# -*- coding: utf-8 -*-
"""ML2023_02_matplotlib.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-x54TaU9KMYQwssanD9lVgzwnPeC-Sbi
"""

"""
File: ML2023_02_matplotlib.py
Author: Fabio Gasparetti
Date: 2024-04-03

Description: Matplotlib
"""

# Nel terminale attivare l'environment Anaconda e installare le librerie se occorre:
#
# source activate python3_11_7_uniroma3
# conda install numpy
# conda install pandas
# conda install matplotlib

# Se non si impiega Anaconda:
#
# pip install pandas
# pip install numpy
# pip install matplotlib

# Per Colab i suddetti comandi sono inutili

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os # per il filesystem

"""La funzione subplot() accetta tre argomenti che descrivono il layout della figura.
Il layout è organizzato in righe e colonne, rappresentate dal primo e dal secondo argomento.
Il terzo argomento rappresenta l'indice del plot corrente.

La figura ha 1 riga, 2 colonne e questa plot è il primo:

`plt.subplot(1, 2, 1)`

La figura ha 1 riga, 2 colonne e questo plot è il secondo:

`plt.subplot(1, 2, 2)`

Quindi, se vogliamo una figura con 2 righe e 1 colonna (il che significa che i due grafici saranno visualizzati uno sopra l'altro invece che uno accanto all'altro), possiamo scrivere la sintassi nel seguente modo.
"""

#plot 1:
x = np.array([0, 1, 2, 3])
y = np.array([3, 8, 1, 10])

plt.subplot(1, 2, 1)
plt.plot(x,y)
plt.title("Plot #1")

#plot 2:
x = np.array([0, 1, 2, 3])
y = np.array([10, 20, 30, 40])

plt.subplot(1, 2, 2)
plt.plot(x,y)
plt.title("Plot #2")

plt.suptitle("MY PLOTS")
plt.show()

x = np.array([0, 1, 2, 3])
y = np.array([3, 8, 1, 10])

plt.subplot(2, 3, 1)
plt.plot(x,y)

x = np.array([0, 1, 2, 3])
y = np.array([10, 20, 30, 40])

plt.subplot(2, 3, 2)
plt.plot(x,y)

x = np.array([0, 1, 2, 3])
y = np.array([3, 8, 1, 10])

plt.subplot(2, 3, 3)
plt.plot(x,y)

x = np.array([0, 1, 2, 3])
y = np.array([10, 20, 30, 40])

plt.subplot(2, 3, 4)
plt.plot(x,y)

x = np.array([0, 1, 2, 3])
y = np.array([3, 8, 1, 10])

plt.subplot(2, 3, 5)
plt.plot(x,y)

x = np.array([0, 1, 2, 3])
y = np.array([10, 20, 30, 40])

plt.subplot(2, 3, 6)
plt.plot(x,y)

plt.show()



"""La funzione `subplots()` crea una figura e un insieme di plots. Consente di creare layout comuni di sottotrame, compreso l'oggetto figura, con un'unica chiamata.
Questa funzione restituisce una figura e un oggetto Axes, o una matrice di oggetti Axes.

"""

fig, ax = plt.subplots()
print(fig, ax)

x = np.linspace(0, 2*np.pi, 400)
y = np.sin(x**2) + np.cos(x)

# singolo plot
fig, ax = plt.subplots()
ax.plot(x, y)
ax.set_title('Simple plot')

plt.figure(figsize=(6, 4))

# figura con 1 riga, 2 colonne di plots
# sharey evita che si ripeta la legenda sull'asse delle y
fig, (ax1, ax2)  = plt.subplots(1, 2,
                                sharey='row')


derivative = 2 * x * np.cos(x**2) - np.sin(x)
ax1.plot(x, y)
ax1.set_title('Sharing Y axis')
ax2.plot(x, derivative)

rows, cols = 2, 3
fig, ax = plt.subplots(rows, cols,
                       sharex='col',
                       sharey='row')

for row in range(rows):
    for col in range(cols):
        ax[row, col].text(0.5, 0.5,
                          str((row, col)),
                          color="green",
                          fontsize=18,
                          ha='center')

plt.show()

"""Sklearn include alcuni dataset di esempio, senza la necessità di scaricarli
dal web:


* load_iris() : iris dataset (classification).

* load_diabetes() : Load and return the diabetes dataset (regression).

* load_digits() : Load and return the digits dataset (classification).

* load_linnerud() : Load and return the physical exercise Linnerud dataset.

* load_wine() : Load and return the wine dataset (classification).

* load_breast_cancer() : Load and return the breast cancer wisconsin dataset (classification).

"""

from sklearn import datasets

iris = datasets.load_iris()

# -> data{ndarray, dataframe} of shape (150, 4)
# The data matrix. If as_frame=True, data will be a pandas DataFrame.

# -> target: {ndarray, Series} of shape (150,)
# The classification target. If as_frame=True, target will be a pandas Series.

# -> feature_names: list
# The names of the dataset columns.

# -> target_names: list
# The names of target classes.

# -> frame: DataFrame of shape (150, 5)
# Only present when as_frame=True. DataFrame with data and target.

print('The data matrix:\n',iris['data'])
print('The classification target:\n',iris['target'])
print('The names of the dataset columns:\n',iris['feature_names'])
print('The names of target classes:\n',iris['target_names'])
print('The full description of the dataset:\n',iris['DESCR'])
print('The path to the location of the data:\n',iris['filename'])

_, ax = plt.subplots()
scatter = ax.scatter(iris.data[:, 0], iris.data[:, 1], c=iris.target)
ax.set(xlabel=iris.feature_names[0], ylabel=iris.feature_names[1])
_ = ax.legend(
    scatter.legend_elements()[0], iris.target_names, loc="lower right", title="Classes"
)

# converto i dati in Pandas dataframe,
# e rinomino la colonna specie con  stringhe

df = pd.DataFrame(iris.data, columns=iris.feature_names)
df['species'] = iris.target
df['species'] = df['species'].replace(to_replace= [0, 1, 2], value = ['setosa', 'versicolor', 'virginica'])

print (df)